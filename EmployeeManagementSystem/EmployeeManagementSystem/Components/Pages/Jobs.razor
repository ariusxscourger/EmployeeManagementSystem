@page "/jobs"
@using EmployeeManagementSystem.Entity
@inject EmployeeService EmployeeService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="jobs-page container my-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="text-primary fw-bold">Jobs</h3>
        <button class="btn btn-primary btn-lg shadow" @onclick="AddJob">
            <i class="bi bi-briefcase"></i> Add New Job
        </button>
    </div>

    <!-- Table -->
    @if (jobs == null)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Loading jobs...</p>
        </div>
    }
    else if (jobs.Count == 0)
    {
        <div class="alert alert-info text-center">
            <i class="bi bi-info-circle"></i> No jobs found. Click <strong>"Add New Job"</strong> to create one.
        </div>
    }
    else
    {
        <div class="table-responsive shadow-sm rounded">
            <table class="table table-hover table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>Job Title</th>
                        <th>Min Salary</th>
                        <th>Max Salary</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var job in jobs)
                    {
                        <tr>
                            <td>@job.JobTitle</td>
                            <td>@job.MinSalary.ToString("C")</td>
                            <td>@job.MaxSalary.ToString("C")</td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-warning" @onclick="() => EditJob(job.JobId)">
                                        <i class="bi bi-pencil-square"></i> Edit
                                    </button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteJob(job.JobId)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<Job>? jobs;

    protected override async Task OnInitializedAsync()
    {
        jobs = await EmployeeService.GetJobsAsync();
    }

    private void AddJob() => NavigationManager.NavigateTo("/add-job");
    private void EditJob(int id) => NavigationManager.NavigateTo($"/edit-job/{id}");
    private async Task DeleteJob(int id)
    {
        await EmployeeService.DeleteJobAsync(id);
        jobs = await EmployeeService.GetJobsAsync(); // Refresh the list
    }
}
