@page "/employees"
@using EmployeeManagementSystem.Entity
@inject EmployeeService EmployeeService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="employees-page container my-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="text-primary fw-bold">Employees</h3>
        <button class="btn btn-primary btn-lg shadow" @onclick="AddEmployee">
            <i class="bi bi-person-plus"></i> Add New Employee
        </button>
    </div>

    <!-- Table -->
    @if (employeeList == null)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Loading employees...</p>
        </div>
    }
    else if (employeeList.Count == 0)
    {
        <div class="alert alert-info text-center">
            <i class="bi bi-info-circle"></i> No employees found. Click <strong>"Add New Employee"</strong> to create one.
        </div>
    }
    else
    {
        <div class="table-responsive shadow-sm rounded">
            <table class="table table-hover table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Email</th>
                        <th>Job</th>
                        <th>Department</th>
                        <th>Manager</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var employee in employeeList)
                    {
                        <tr>
                            <td>@employee.FirstName</td>
                            <td>@employee.LastName</td>
                            <td>@employee.Email</td>
                            <td>@(employee.Job?.JobTitle ?? "<em>Not Assigned</em>")</td>
                            <td>@(employee.Department?.DepartmentName ?? "<em>Not Assigned</em>")</td>
                            <td>@(employee.Manager == null ? "None" : employee.Manager.FirstName + " " + employee.Manager.LastName)</td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-warning" @onclick="() => EditEmployee(employee.EmployeeId)">
                                        <i class="bi bi-pencil-square"></i> Edit
                                    </button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteEmployee(employee.EmployeeId)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>

            </table>
        </div>
    }
</div>

@code {
    private List<Employee>? employeeList;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeService.GetEmployeesAsync();
    }
    //add logging on add employee
    private void AddEmployee() => NavigationManager.NavigateTo("/add-employee");


    private void EditEmployee(int id) => NavigationManager.NavigateTo($"/edit-employee/{id}");
    private async Task DeleteEmployee(int id)
    {
        await EmployeeService.DeleteEmployeeAsync(id);
        employeeList = await EmployeeService.GetEmployeesAsync(); // Refresh the list
    }
}
