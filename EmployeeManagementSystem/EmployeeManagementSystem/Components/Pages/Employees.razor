@page "/employees"
@using EmployeeManagementSystem.Entity
@inject EmployeeService EmployeeService
@inject NavigationManager NavigationManager

<h3>Employees</h3>
<button @onclick="AddEmployee">Add New Employee</button>

@if (employeeList == null)
{
    <p>Loading...</p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Job</th>
                <th>Department</th>
                <th>Manager</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employeeList)
            {
                <tr>
                    <td>@employee.FirstName</td>
                    <td>@employee.LastName</td>
                    <td>@employee.Email</td>
                    <td>@employee.Job?.JobTitle</td>
                    <td>@employee.Department?.DepartmentName</td>
                    <td>@(employee.Manager == null ? "None" : employee.Manager.FirstName + " " + employee.Manager.LastName)</td>
                    <td>
                        <button @onclick="() => EditEmployee(employee.EmployeeId)">Edit</button>
                        <button @onclick="() => DeleteEmployee(employee.EmployeeId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Employee> employeeList;

    protected override async Task OnInitializedAsync()
    {
        employeeList = await EmployeeService.GetEmployeesAsync();
    }

    private void AddEmployee() => NavigationManager.NavigateTo("/add-employee");
    private void EditEmployee(int id) => NavigationManager.NavigateTo($"/edit-employee/{id}");
    private async Task DeleteEmployee(int id)
    {
        await EmployeeService.DeleteEmployeeAsync(id);
        employeeList = await EmployeeService.GetEmployeesAsync(); // Refresh the list
    }
}
