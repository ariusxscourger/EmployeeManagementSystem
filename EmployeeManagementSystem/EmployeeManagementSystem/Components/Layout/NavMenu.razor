@using Blazored.LocalStorage
@inject NavigationManager NavigationManager
@inject UserLoginService LoginService
@inject ILocalStorageService LocalStorage

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">Employee Management System</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <!-- Employees -->
                <li class="nav-item">
                    <NavLink class="nav-link" href="/employees">
                        <i class="bi bi-people-fill me-2"></i> Employees
                    </NavLink>
                </li>
                <!-- Jobs -->
                <li class="nav-item">
                    <NavLink class="nav-link" href="/jobs">
                        <i class="bi bi-briefcase-fill me-2"></i> Jobs
                    </NavLink>
                </li>
                <!-- Departments -->
                <li class="nav-item">
                    <NavLink class="nav-link" href="/departments">
                        <i class="bi bi-building me-2"></i> Departments
                    </NavLink>
                </li>
                <!-- Employee Audit -->
                <li class="nav-item">
                    <NavLink class="nav-link" href="/employee-audit">
                        <i class="bi bi-clipboard-data-fill me-2"></i> Employee Audit
                    </NavLink>
                </li>
            </ul>

            <!-- Login/Logout -->
            <ul class="navbar-nav">
                @if (!isLoggedIn)
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/login">
                            <i class="bi bi-box-arrow-in-right me-2"></i> Login
                        </NavLink>
                    </li>
                }
                else
                {
                    <li class="nav-item">
                        <a class="nav-link" href="#" @onclick="Logout">
                            <i class="bi bi-box-arrow-right me-2"></i> Logout
                        </a>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>

@code {
    private bool isLoggedIn;

    /// <summary>
    /// Check if the user is logged in by retrieving the token from local storage.
    /// </summary>
    private async Task<bool> CheckLoginStatusAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");

        // Debug output to ensure the token is being retrieved correctly
        Console.WriteLine($"Retrieved token: {token}");

        return !string.IsNullOrEmpty(token); // User is logged in if the token exists
    }

    /// <summary>
    /// Logs out the user by clearing the token and navigating to the login page.
    /// </summary>
    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken"); // Remove token from local storage
        await LoginService.LogoutAsync(); // Logout logic (if any server-side logic exists)
        isLoggedIn = false; // Update UI state
        StateHasChanged(); // Ensure the UI updates
        NavigationManager.NavigateTo("/login", forceLoad: true); // Redirect to login page
    }

    /// <summary>
    /// Called after the component has rendered. Use this for JavaScript interop calls.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("OnAfterRenderAsync called");

            isLoggedIn = await CheckLoginStatusAsync();

            // Log the login status for debugging
            Console.WriteLine($"isLoggedIn: {isLoggedIn}");

            StateHasChanged(); // Trigger a UI update
        }
    }
}
